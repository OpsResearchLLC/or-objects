/*
	A basic extension of the java.applet.Applet class
 */

import java.awt.*;
import java.util.*;
import java.applet.*;

import drasys.or.prob.*;
import drasys.or.matrix.*;
import drasys.or.linear.blas.*;

public class Tutorial_7 extends Applet
{
    final int maxBars = 16;

    Image image;
    int minWork = 1;
    String typeA = "RowMajor";
    String typeB = "ColumnMajor";
    String typeC = "ColumnMajor";
    double[] values = null;
       
	public void init()
	{
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(java.awt.Color.lightGray);
		setSize(252,397);
		msgLabel.setAlignment(java.awt.Label.CENTER);
		add(msgLabel);
		msgLabel.setBounds(12,132,228,28);
		typea.addItem("RowMajor");
		typea.addItem("ColumnMajor");
		try {
			typea.select(0);
		}
		catch (IllegalArgumentException e) { }
		add(typea);
		typea.setBounds(12,192,100,25);
		typeb.addItem("RowMajor");
		typeb.addItem("ColumnMajor");
		try {
			typeb.select(1);
		}
		catch (IllegalArgumentException e) { }
		add(typeb);
		typeb.setBounds(12,252,100,25);
		mChoice.addItem("50");
		mChoice.addItem("100");
		mChoice.addItem("150");
		mChoice.addItem("200");
		mChoice.addItem("250");
		mChoice.addItem("500");
		mChoice.addItem("750");
		mChoice.addItem("1000");
		mChoice.addItem("2000");
		try {
			mChoice.select(0);
		}
		catch (IllegalArgumentException e) { }
		add(mChoice);
		mChoice.setBounds(120,192,48,25);
		kChoice.addItem("50");
		kChoice.addItem("100");
		kChoice.addItem("150");
		kChoice.addItem("200");
		kChoice.addItem("250");
		kChoice.addItem("500");
		kChoice.addItem("750");
		kChoice.addItem("1000");
		kChoice.addItem("2000");
		try {
			kChoice.select(0);
		}
		catch (IllegalArgumentException e) { }
		add(kChoice);
		kChoice.setBounds(120,252,48,25);
		nChoice.addItem("50");
		nChoice.addItem("100");
		nChoice.addItem("150");
		nChoice.addItem("200");
		nChoice.addItem("250");
		nChoice.addItem("500");
		nChoice.addItem("750");
		nChoice.addItem("1000");
		nChoice.addItem("2000");
		try {
			nChoice.select(0);
		}
		catch (IllegalArgumentException e) { }
		add(nChoice);
		nChoice.setBounds(180,252,48,25);
		label2.setText("Matrix  A");
		label2.setAlignment(java.awt.Label.CENTER);
		add(label2);
		label2.setBounds(12,168,100,24);
		label3.setText("Matrix  B");
		label3.setAlignment(java.awt.Label.CENTER);
		add(label3);
		label3.setBounds(12,228,100,24);
		label4.setText("Rows");
		label4.setAlignment(java.awt.Label.CENTER);
		add(label4);
		label4.setBounds(120,168,48,20);
		label5.setText("Rows");
		label5.setAlignment(java.awt.Label.CENTER);
		add(label5);
		label5.setBounds(120,228,48,20);
		label6.setText("Cols");
		label6.setAlignment(java.awt.Label.CENTER);
		add(label6);
		label6.setBounds(180,228,48,20);
		alphaChoice.addItem("-2.5");
		alphaChoice.addItem("-1.0");
		alphaChoice.addItem("0.0");
		alphaChoice.addItem("1.0");
		alphaChoice.addItem("2.5");
		try {
			alphaChoice.select(3);
		}
		catch (IllegalArgumentException e) { }
		add(alphaChoice);
		alphaChoice.setBounds(120,312,52,25);
		label7.setText("Alpha");
		label7.setAlignment(java.awt.Label.CENTER);
		add(label7);
		label7.setBounds(120,288,48,20);
		label8.setText("Matrix  C");
		label8.setAlignment(java.awt.Label.CENTER);
		add(label8);
		label8.setBounds(12,288,100,24);
		typec.addItem("RowMajor");
		typec.addItem("ColumnMajor");
		try {
			typec.select(1);
		}
		catch (IllegalArgumentException e) { }
		add(typec);
		typec.setBounds(12,312,100,25);
		betaChoice.addItem("-2.5");
		betaChoice.addItem("-1.0");
		betaChoice.addItem("0.0");
		betaChoice.addItem("1.0");
		betaChoice.addItem("2.5");
		try {
			betaChoice.select(3);
		}
		catch (IllegalArgumentException e) { }
		add(betaChoice);
		betaChoice.setBounds(180,312,52,25);
		label9.setText("Beta");
		label9.setAlignment(java.awt.Label.CENTER);
		add(label9);
		label9.setBounds(180,288,48,20);
		runButton.setLabel("Run");
		add(runButton);
		runButton.setBounds(12,348,216,36);
		//}}
		initTutorial();
		
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		runButton.addActionListener(lSymAction);
		//}}
	}
	
	//{{DECLARE_CONTROLS
	java.awt.Label msgLabel = new java.awt.Label();
	java.awt.Choice typea = new java.awt.Choice();
	java.awt.Choice typeb = new java.awt.Choice();
	java.awt.Choice mChoice = new java.awt.Choice();
	java.awt.Choice kChoice = new java.awt.Choice();
	java.awt.Choice nChoice = new java.awt.Choice();
	java.awt.Label label2 = new java.awt.Label();
	java.awt.Label label3 = new java.awt.Label();
	java.awt.Label label4 = new java.awt.Label();
	java.awt.Label label5 = new java.awt.Label();
	java.awt.Label label6 = new java.awt.Label();
	java.awt.Choice alphaChoice = new java.awt.Choice();
	java.awt.Label label7 = new java.awt.Label();
	java.awt.Label label8 = new java.awt.Label();
	java.awt.Choice typec = new java.awt.Choice();
	java.awt.Choice betaChoice = new java.awt.Choice();
	java.awt.Label label9 = new java.awt.Label();
	java.awt.Button runButton = new java.awt.Button();
	//}}
	
    public void 
    initTutorial()
    {
        image = getImage(getDocumentBase(), "Tutorial_7.gif");
    }
	
    public void
    paint(Graphics g)
    {
        if(image != null) g.drawImage(image,0,0,this);
        paintBars(g, values);
    }

    public void
    test()
    {
        int m = new Integer(mChoice.getSelectedItem()).intValue();
        int n = new Integer(nChoice.getSelectedItem()).intValue();
        int k = new Integer(kChoice.getSelectedItem()).intValue();
        double alpha = new Double(alphaChoice.getSelectedItem()).doubleValue();
        double beta = new Double(betaChoice.getSelectedItem()).doubleValue();
        
        ContiguousMatrixI A = buildMatrix(typea.getSelectedItem(), m, k);
        ContiguousMatrixI B = buildMatrix(typeb.getSelectedItem(), k, n);
        ContiguousMatrixI C = buildMatrix(typec.getSelectedItem(), m, n);
        
        values = null;
        paint(getGraphics());
        SmpBLAS3 smp = new SmpBLAS3();
        smp.getSmp().setMinWork(0);
        MatrixBLAS3 blas3 = new MatrixBLAS3(0, smp);
        double max=0, min=0;
        values = new double[maxBars];
        for(int i=0; i<maxBars; i++){
            smp.getSmp().setMaxThreads(i+1);
            msgLabel.setText("Threads - "+(i+1));
            int it = 0;
            long time = 0;
            while(time < 1000){
                Date t1 = new Date();
                try{blas3.dgemm(false, false, alpha, A, B, beta, C);}
                catch(BlasException e){}
                Date t2 = new Date();
                time += t2.getTime() - t1.getTime();
                it++;
            }
            double t = 1000.0 * (double)time;
            double mflops = ((double)(m*n*(2*k+3)*it))/t;
            System.out.println(mflops);
            values[i] = mflops;
            if(i == 0 || mflops > max) max = mflops;
            if(i == 0 || mflops < min) min = mflops;
        }
        msgLabel.setText("MFLOPS:  max = "+(int)(max+0.5)+",  min = "+(int)(min+0.5));
        paint(getGraphics());
    }
    
    public ContiguousMatrixI
    buildMatrix(String type, int mChoice, int nChoice)
    {
        ContiguousMatrixI A = null;
        if(type.equals("RowMajor")){
            A = new RowMajorMatrix(mChoice,nChoice);
        }
        else if(type.equals("ColumnMajor")){
            A = new ColumnMajorMatrix(mChoice,nChoice);
        }
        new UniformDistribution().setElements(A);
        return A;
    }

    public void
    paintBars(Graphics g, double[] vals)
    {
        System.out.println("A");
        int x = 21;
        int base = 79;
        int width = 11;
        int spacing = 13;
        int barHeight = 67;

        if(vals == null || vals.length < 1) return;
        int n = Math.min(maxBars, vals.length);
        double max = vals[0];
        for(int i=1; i<n; i++){
            max = Math.max(max,vals[i]);
        }
        if(max == 0) return;
        g.setColor(Color.red);
        for(int i=0; i<n; i++){
            int height = (int)((vals[i]/max)*barHeight);
            int y = base - height;           
            g.fillRect(x,y,width,height);
            x += spacing;
        }
        System.out.println("B");
        
        
    }
	

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == runButton)
				runButton_ActionPerformed(event);
		}
	}

	void runButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		test();
	}
}
