
import java.awt.*;
import java.applet.*;
import java.util.*;
import drasys.or.prob.*;
import drasys.or.matrix.*;

public class Tutorial_3 extends Applet implements Runnable {

    static final String IMG = "images/";
    static final int CC  = 47;
    static final int HC  = 14;
    static final int POS = 28;
    static final int CAR = 31;
    static final int TOP = 12;
    static final int BOT = 232;
    static final int XINC = 24;
    static final int YINC = 20;
    static final int NFLR = 12;
    static final int NCAR = 4;
    static final int CPS = 20;
    static final int UP=0, DOWN=1, NIL=-1;

    class CarButtons
    {
        int _x;
        boolean[] _on;

        CarButtons(int x)
        {
            _x = x;
            _on = new boolean[NFLR];
        }

        void button(int i, boolean b)
        {
            _on[i] = b;
        }

        int nextUp(int flr)
        {
            for(int i=flr; i<NFLR; i++)
                if(_on[i]) return i;
            return NIL;
        }

        int nextDown(int flr)
        {
            for(int i=flr; i>=0; i--)
                if(_on[i]) return i;
            return NIL;
        }

        void
        drawOn(Graphics g)
        {
            int y = BOT;
            for(int i=0; i<NFLR; i++){
                if(_on[i] && _carButtonImg != null) g.drawImage(_carButtonImg,_x,y,Tutorial_3.this);
                y -= YINC;
            }
        }
    }

    class HallButtons
    {
        Vector[] _upQueue;
        Vector[] _downQueue;

        HallButtons()
        {
            _upQueue = new Vector[NFLR];
            _downQueue = new Vector[NFLR];
            for(int i=0; i<NFLR; i++){
                _upQueue[i] = new Vector();
                _downQueue[i] = new Vector();
            }
        }

        void arrival(Passenger p)
        {
            if(p._dst > p._org) _upQueue[p._org].addElement(p);
            if(p._dst < p._org) _downQueue[p._org].addElement(p);
        }

        void
        drawOn(Graphics g)
        {
            int y = BOT;
            for(int i=0; i<NFLR; i++){
                boolean u = _upQueue[i].size() > 0;
                boolean d = _downQueue[i].size() > 0;
                if(u || d){
                    Image img = _hallButtonImg[(u&&d)?2:u?0:1];
                    if(img != null) g.drawImage(img,HC,y,Tutorial_3.this);
                }
                y -= YINC;
            }
        }
    }

    class Car
    {
        final int ST_IDLE=0, ST_START=1, ST_RUN=2;
        final int ST_STOP=3, ST_OPEN=4, ST_DRTM=5;
        final int ST_CLOSE=6;

        int _idx;
        int _state;
        int _dorPos;
        int _time;
        int _posX, _carX;
        int _dstPos, _orgPos, _curPos;
        int _dstFlr, _orgFlr, _curFlr;
        int _moveDir, _prefDir;
        CarButtons _buttons;

        Car(int idx, int posX, int carX)
        {
            _idx = idx;
            _posX = posX;
            _carX = carX;
            _state = ST_IDLE;
            _dstFlr = _orgFlr = _curFlr = 0;
            _dstPos = _orgPos = _curPos = BOT;
            _dorPos = NIL;
            _buttons = _carButtons[idx];
            _moveDir = _prefDir = NIL;
        }

        void
        runCar(int t)
        {
            switch(_state){

            case ST_IDLE: // Waiting for something to do

                if(_dstFlr != _curFlr){
                    _state = ST_START;
                    return;
                }

                if(_prefDir != DOWN){ // Going up and button above ??
                    int flr = _buttons.nextUp(_curFlr);
                    if(flr != NIL){
                        _prefDir = UP;
                        go(flr);
                        return;
                    }
                }

                if(_prefDir != UP){ // Going down and button below ??
                    int flr = _buttons.nextDown(_curFlr);
                    if(flr != NIL){
                        _prefDir = DOWN;
                        go(flr);
                        return;
                    }
                }

                _prefDir = NIL;

                // Find something in hall.
                int d = NFLR-1-_idx;
                for(int u=_idx; u<NFLR; u+=4,d-=4){
                    if(_hallButtons._upQueue[u].size() > 0){
                        go(u);
                        return;
                    }
                    if(_hallButtons._downQueue[d].size() > 0){
                        go(d);
                        return;
                    }
                }

                break;

            case ST_START: // Start moving car

                if(_orgFlr != _dstFlr){
                    _time = t;
                    _orgPos = BOT - _orgFlr * YINC;
                    _dstPos = BOT - _dstFlr * YINC;
                    _state = ST_RUN;
                    _moveDir = _orgFlr < _dstFlr ? UP : DOWN;
                }
                else{
                    _state = ST_STOP;
                }
                break;

            case ST_RUN: // Run car up or down

                if((_curPos-BOT)%YINC == 0 && _prefDir != DOWN && _hallButtons._upQueue[_curFlr].size() > 0){
                    _dstFlr = _curFlr;
                    _dstPos = BOT - _dstFlr * YINC;
                }
                else if((_curPos-BOT)%YINC == 0 && _prefDir != UP && _hallButtons._downQueue[_curFlr].size() > 0){
                    _dstFlr = _curFlr;
                    _dstPos = BOT - _dstFlr * YINC;
                }

                if(_moveDir == UP){
                    _curPos--;
                    _curFlr = (BOT-_curPos)/YINC;
                    if(_curPos > _dstPos) return;
                }
                else if(_moveDir == DOWN){
                    _curPos++;
                    _curFlr = (BOT-_curPos)/YINC;
                    if(_curPos < _dstPos) return;
                }

                _state = ST_STOP;
                _curFlr = _orgFlr = _dstFlr;
                _curPos = _orgPos = _dstPos;
                break;

            case ST_STOP: // Reached destination, start doors.

                boolean open = false;
                if(_buttons._on[_curFlr]) open = true;
                if(_prefDir != DOWN && _hallButtons._upQueue[_curFlr].size() > 0) open=true;
                if(_prefDir != UP && _hallButtons._downQueue[_curFlr].size() > 0) open=true;
                if(open){
                    _dorPos = 0;
                    _time = t;
                    _state = ST_OPEN;
                }
                else
                    _state = ST_IDLE;
                break;

            case ST_OPEN: // Open doors and clear buttons

                if(++_dorPos == 6){
                    _state = ST_DRTM;
                    _time = t;
                    _buttons.button(_curFlr,false);
                }
                break;

            case ST_DRTM: // Time doors and load passengers

                if((t-_time) < CPS) return;

                if(_prefDir != DOWN && _hallButtons._upQueue[_curFlr].size() !=0){
                    Passenger p = (Passenger)_hallButtons._upQueue[_curFlr].elementAt(0);
                    _hallButtons._upQueue[_curFlr].removeElementAt(0);
                    _buttons.button(p._dst,true);
                    _time = t;
                    return;
                }

                if(_prefDir != UP && _hallButtons._downQueue[_curFlr].size() !=0){
                    Passenger p = (Passenger)_hallButtons._downQueue[_curFlr].elementAt(0);
                    _hallButtons._downQueue[_curFlr].removeElementAt(0);
                    _buttons.button(p._dst,true);
                    _time = t;
                    return;
                }

                _state = ST_CLOSE;
                _dorPos--;
                break;

            case ST_CLOSE: // Close doors

                if(--_dorPos == NIL) _state = ST_IDLE;
                break;
            }
        }

        synchronized void
        go(int flr)
        {
            if( flr < 0){
                System.out.println("Floor < 0");
                return;
            }
            if(flr >= NFLR){
                System.out.println("Floor >= NFLR");
                return;
            }
            if(flr == _curFlr){
                _state = ST_START;
                return;
            }
            if(_prefDir == UP && flr < _curFlr){
                System.out.println("Send down with upPref - "+_idx);
                return;
            }
            if(_prefDir == DOWN && flr > _curFlr){
                System.out.println("Send up with downPref - "+_idx);
                return;
            }
            _dstFlr = flr;
        }

        synchronized void
        drawOn(Graphics g)
        {
            if(_carPosImg != null) g.drawImage(_carPosImg,_posX,_curPos,null);
            if(_dorPos != -1 && _doorOpenImg[_dorPos] != null){
                g.drawImage(_doorOpenImg[_dorPos],_carX,_curPos,null);
            }
        }
    }

    class Passenger
    {
        int _org;
        int _dst;

        Passenger(int org, int dst)
        {
            _org = org;
            _dst = dst;
        }
    }

    Car[] _cars;
    Image _buffer;
    Graphics _bg;
    Image _backgroundImg;
    Image _carButtonImg;
    Image _carPosImg;
    Image[] _doorOpenImg;
    Image[] _doorDirImg;
    Image[] _hallButtonImg;
    CarButtons[] _carButtons;
    HallButtons _hallButtons;
    DistributionI _arrivalDist;
    DiscreteDistributionI _origDist;
    DiscreteDistributionI _destDist;
    int _nextArrival;
    Thread _clock;

    public void
    drawOn(Graphics g)
    {
        if(_backgroundImg != null) g.drawImage(_backgroundImg,0,0,null);
        _hallButtons.drawOn(g);
        for(int i=0; i<NCAR; i++){
            _carButtons[i].drawOn(g);
            _cars[i].drawOn(g);
        }
    }

    public void
    update(Graphics g)
    {
        paint(g);
    }

    public void
    paint(Graphics g)
    {
        drawOn(_bg);
        g.drawImage(_buffer,0,0,null);

    }

    public void
    run()
    {
        int time = 0;
        while(true){
            checkArrivals(time);
            _cars[0].runCar(time);
            _cars[1].runCar(time);
            _cars[2].runCar(time);
            _cars[3].runCar(time);
            paint(this.getGraphics());
            try{_clock.sleep(50);}catch(InterruptedException e){}
            time++;
        }
    }

    public void
    arrival(Passenger p)
    {
        _hallButtons.arrival(p);
    }

    public void
    initArrivals()
    {
        int[] floors = {0,1,2,3,4,5,6,7,8,9,10,11}; // Floors in building
        double[] origProb = {2,1,1,1,1,2,1,1,1,1,1,1}; //Empirical will scale to 1.0
        double[] destProb = {2,1,1,1,1,1,1,1,1,2,1,1}; //Empirical will scale to 1.0

        _arrivalDist = new ExponentialDistribution(5);
        _nextArrival = (int)(CPS * _arrivalDist.getRandomScaler());

        _origDist = new EmpiricalDistribution(floors, new DenseVector(origProb));
        _destDist = new EmpiricalDistribution(floors, new DenseVector(destProb));
    }

    public void
    checkArrivals(int time)
    {
        if(time < _nextArrival) return;
        _nextArrival = (int)(time + CPS * _arrivalDist.getRandomScaler());

        int orig = _origDist.getRandomInteger();
        int dest = _destDist.getRandomInteger();
        while(dest == orig) dest = _destDist.getRandomInteger();

        arrival(new Passenger(orig, dest));
    }

    public void init() {

        super.init();

        _doorOpenImg = new Image[7];
        _doorDirImg = new Image[2];
        _hallButtonImg = new Image[4];
        _backgroundImg = this.getImage(this.getDocumentBase(), IMG+"Tutorial_3.gif");
        _carPosImg = this.getImage(this.getDocumentBase(), IMG+"cpos.gif");
        _carButtonImg = this.getImage(this.getDocumentBase(), IMG+"cc.gif");
        _doorOpenImg[0] = this.getImage(this.getDocumentBase(), IMG+"door1.gif");
        _doorOpenImg[1] = this.getImage(this.getDocumentBase(), IMG+"door2.gif");
        _doorOpenImg[2] = this.getImage(this.getDocumentBase(), IMG+"door3.gif");
        _doorOpenImg[3] = this.getImage(this.getDocumentBase(), IMG+"door4.gif");
        _doorOpenImg[4] = this.getImage(this.getDocumentBase(), IMG+"door5.gif");
        _doorOpenImg[5] = this.getImage(this.getDocumentBase(), IMG+"door6.gif");
        _doorOpenImg[6] = this.getImage(this.getDocumentBase(), IMG+"door7.gif");
        _hallButtonImg[0] = this.getImage(this.getDocumentBase(), IMG+"hcu.gif");
        _hallButtonImg[1] = this.getImage(this.getDocumentBase(), IMG+"hcd.gif");
        _hallButtonImg[2] = this.getImage(this.getDocumentBase(), IMG+"hcb.gif");

        _hallButtons = new HallButtons();
        _carButtons = new CarButtons[NCAR];
        _carButtons[0] = new CarButtons(CC);
        _carButtons[1] = new CarButtons(CC+XINC);
        _carButtons[2] = new CarButtons(CC+2*XINC);
        _carButtons[3] = new CarButtons(CC+3*XINC);

        _cars = new Car[NCAR];
        _cars[0] = new Car(0, POS, CAR);
        _cars[1] = new Car(1, POS+XINC, CAR+XINC);
        _cars[2] = new Car(2, POS+2*XINC, CAR+2*XINC);
        _cars[3] = new Car(3, POS+3*XINC, CAR+3*XINC);

        Dimension d = this.size();
        _buffer = this.createImage(d.width,d.height);
        _bg = _buffer.getGraphics();

        initArrivals();

        _hallButtons.arrival(new Passenger(5,8));
        _hallButtons.arrival(new Passenger(10,2));

        _clock = new Thread(this);
        _clock.start();

}
}
